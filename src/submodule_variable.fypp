#:include "common.fypp"
submodule(module_netcdf) submodule_variable

implicit none
contains

!> Get meta data for a variable
module function get_var(group, name) result(variable)
  type(group_type), intent(inout) :: group
  character(*), intent(in) :: name
  type(variable_type) :: variable
  integer :: status
  integer, allocatable :: s(:) !> shape

  !> Inquire variable ID
  variable%name = name
  status = nc_inq_varid(group%id, name//c_null_char, variable%id)
  call handle_error(status, "nc_inq_varid")

  !> Inquire dimensions and attributes
  call inquire_dimensions(group, variable)
  call inquire_attributes(group, variable)

  !> Inquire variable type
  status = nc_inq_vartype(group%id, variable%id, variable%type)
  call handle_error(status, "nc_inq_vartype")

  select case (size(variable%dimensions))
  #:for rank in ranks
  case (${rank}$)
    allocate (container_${rank}$d :: variable%container)
  #:endfor
  case default
    error stop "Invalid data rank."
  end select

  select case (variable%type)
  #:for nc_kind, kind, get_var in zip(nc_kinds, kinds, get_vars)
  case (${nc_kind}$)

    select type (container_ => variable%container)
    #:for rank in ranks
    type is (container_${rank}$d)

      s = shape(variable%dimensions)
      #: set n = int(rank)
      allocate (${kind}$ :: container_%data( &
        & #{for i in range(n - 1)}#s(${i + 1}$), #{endfor}#s(${n}$)))
      #: del n

      select type (data_ => container_%data)
      type is (${kind}$)
        status = ${get_var}$(group%id, variable%id, data_)
        call handle_error(status, "${get_var}$")
      end select

    #:endfor
    end select

  #:endfor
  end select
end function get_var

end submodule submodule_variable
