#: include "module_common.fypp"
submodule(module_fortran_interface) submodule_attribute
implicit none
contains

module pure function new_att_vec(name, vals) result(ret)
  character(len=*), intent(in) :: name
  class(*), intent(in) :: vals(:)
  type(netcdf_attribute) :: ret

  ret%name = name
  select type (vals_ => vals)
  #: for type, kind, nc_type in zip(types, kinds, nc_types)
  type is (${type}$ (${kind}$))
    ret%type = ${nc_type}$
    if (associated(ret%vals)) deallocate (ret%vals)
    allocate (ret%vals, source=vals_)
    ret%len = size(vals_)
  #: endfor
  type is (character(*))
    ret%type = nc_char
    if (associated(ret%vals)) deallocate (ret%vals)
    allocate (ret%vals, source=vals_)
    ret%len = size(vals_)
  end select
end function new_att_vec

module pure function new_att_scal(name, val) result(ret)
  character(len=*), intent(in) :: name
  class(*), intent(in) :: val
  type(netcdf_attribute) :: ret

  ret%name = name
  select type (val_ => val)
  #: for type, kind, nc_type in zip(types, kinds, nc_types)
  type is (${type}$ (${kind}$))
    ret%type = ${nc_type}$
    if (associated(ret%vals)) deallocate (ret%vals)
    allocate (ret%vals, source=[val_])
    ret%len = 1
  #: endfor
  type is (character(*))
    ret%type = nc_char
    if (associated(ret%vals)) deallocate (ret%vals)
    allocate (ret%vals, source=[val_])
    ret%len = 1
  end select
end function new_att_scal

module function new_atts(atts) result(ret)
  type(netcdf_attribute), intent(in) :: atts(:)
  type(netcdf_attribute), allocatable :: ret(:)
  integer :: i

  ret = atts
  do i = 1, size(ret)
    ret(i)%ID = i - 1
  end do
end function new_atts

subroutine put_att_(ncid, varid, att)
  integer(c_int), intent(in) :: ncid, varid
  type(netcdf_attribute) :: att
  integer(c_int) :: stat

  select type (vals_ => att%vals)
  #: for type, kind, c_name in zip(types, kinds, c_names)
  type is (${type}$ (${kind}$))
    stat = nc_put_att_${c_name}$ ( &
      & ncid, varid, cstr(att%name), &
      & att%type, att%len, vals_)
    call handle_error(stat, "nc_put_att_${c_name}$")
  #: endfor
  type is (character(*))
    stat = nc_put_att_text( &
      & ncid, varid, cstr(att%name), &
      & len(vals_, c_size_t), vals_)
    call handle_error(stat, "nc_put_att_text")
  end select
end subroutine put_att_

subroutine put_atts_(ncid, varid, atts)
  integer(c_int), intent(in) :: ncid, varid
  type(netcdf_attribute), intent(in) :: atts(:)
  integer :: i

  do i = 1, size(atts)
    call put_att_(ncid, varid, atts(i))
  end do
end subroutine put_atts_

module subroutine put_grp_atts(grp)
  class(netcdf_group), intent(in) :: grp

  if (allocated(grp%atts)) &
    & call put_atts_(grp%ID, nc_global, grp%atts)
end subroutine put_grp_atts

module subroutine put_var_atts(var)
  type(netcdf_variable), intent(in) :: var

  if (allocated(var%atts)) &
    & call put_atts_(var%grpID, var%ID, var%atts)
end subroutine put_var_atts

function inq_atts_(ncid, varid, natts) result(atts)
  integer(c_int), intent(in) :: ncid, varid, natts
  type(netcdf_attribute), allocatable :: atts(:)
  integer(c_int) :: i, stat
  character(kind=c_char, len=nc_max_name) :: tmp

  if (allocated(atts)) deallocate (atts)
  allocate (atts(natts))

  do i = 1, natts
    associate (att => atts(i))
      att%ID = i - 1
      stat = nc_inq_attname(ncid, varid, att%ID, tmp)
      call handle_error(stat, "nc_inq_attname")
      att%name = cstrip(tmp)

      stat = nc_inq_att(ncid, varid, tmp, att%type, att%len)
      call handle_error(stat, "nc_inq_att")
    end associate
  end do
end function inq_atts_

module subroutine inq_grp_atts(grp)
  class(netcdf_group), intent(inout) :: grp
  integer(c_int) :: stat, natts

  stat = nc_inq_natts(grp%ID, natts)
  call handle_error(stat, "nc_inq_natts")
  grp%atts = inq_atts_(grp%ID, nc_global, natts)
end subroutine inq_grp_atts

module subroutine inq_var_atts(var)
  type(netcdf_variable), intent(inout) :: var
  integer(c_int) :: stat, natts

  if (.not. associated(var%grpID)) &
    & error stop "[inq_var_atts] Group ID not associated."

  stat = nc_inq_varnatts(var%grpID, var%ID, natts)
  call handle_error(stat, "nc_inq_varnatts")
  var%atts = inq_atts_(var%grpID, var%ID, natts)
end subroutine inq_var_atts

subroutine get_atts_(ncid, varid, atts)
  integer(c_int), intent(in) :: ncid, varid
  type(netcdf_attribute), intent(inout) :: atts(:)
  integer(c_int) :: stat, i

  do i = 1, size(atts)
    associate (att => atts(i))
      if (associated(att%vals)) deallocate (att%vals)
      select case (att%type)
      #: for kind, type, nc_type, c_name in zip(kinds, types, nc_types, c_names)
      case (${nc_type}$)
        allocate (${type}$(${kind}$) :: att%vals(att%len))
        select type (vals_ => att%vals)
        type is (${type}$(${kind}$))
          stat = nc_get_att_${c_name}$(ncid, varid, cstr(att%name), vals_)
          call handle_error(stat, "nc_get_att_${c_name}$")
        end select
      #: endfor
      case (nc_char)
        if (att%len > nc_max_char) then
          allocate (character(kind=c_char, len=nc_max_char) :: &
            & att%vals(att%len/nc_max_char + 1))
        else
          allocate (character(kind=c_char, len=att%len) :: att%vals(1))
        end if
        select type (vals_ => att%vals)
        type is (character(kind=c_char, len=*))
          stat = nc_get_att_text(ncid, varid, cstr(att%name), vals_)
          call handle_error(stat, "nc_get_att_text")
        end select
      end select
    end associate
  end do
end subroutine get_atts_

module subroutine get_var_atts(var)
  type(netcdf_variable), intent(inout) :: var

  if (.not. associated(var%grpID)) &
    & error stop "[inq_var_atts] Group ID not associated."
  call get_atts_(var%grpID, var%ID, var%atts)
end subroutine get_var_atts

end submodule submodule_attribute
