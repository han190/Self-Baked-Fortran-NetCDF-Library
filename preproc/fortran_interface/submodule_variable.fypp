#: include "module_common.fypp"
submodule(module_fortran_interface) submodule_variable
implicit none
contains

module function new_var(data, name, dims, unlim_dim, atts) result(var)
  class(*), target, intent(in) :: data(..)
  character(len=*), intent(in) :: name
  type(netcdf_dimension), intent(in) :: dims(:)
  integer, intent(in), optional :: unlim_dim
  type(netcdf_attribute), intent(in), optional :: atts(:)
  type(netcdf_variable) :: var

  var%name = name
  if (present(unlim_dim)) then
    var%dims = new_dims_unlim(dims, unlim_dim)
  else
    var%dims = new_dims(dims)
  end if
  if (present(atts)) then
    var%atts = new_atts(atts)
  end if

  select rank (data_ => data)
  #: for rank in range(1, max_rank)
  rank (${rank}$)
    if (.not. all(shape(var%dims) == shape(data_))) &
      & error stop "[new_var] Shape of dims /= shape of data."
    var%vals(1:size(data_)) => data_
    select type (data_)
    #: for type, kind, nc_type in zip(types, kinds, nc_types)
    type is (${type}$(${kind}$))
      var%type = ${nc_type}$
    #: endfor
    type is (character(*))
      var%type = nc_char
    end select
  #: endfor
  rank default
    error stop "[new_var] Invalid rank."
  end select
end function new_var

module pure function shape_var(var) result(ret)
  type(netcdf_variable), intent(in) :: var
  integer, allocatable :: ret(:)

  ret = shape_dims(var%dims)
end function shape_var

module subroutine def_var(var)
  type(netcdf_variable), intent(inout) :: var
  integer(c_int) :: stat, ndims, i
  integer(c_int), allocatable :: dimids(:)

  ndims = size(var%dims, kind=c_int)
  dimids = [(var%dims(i)%ID, i=1, ndims)]
  if (associated(var%grpID)) then
    stat = nc_def_var(var%grpID, cstr(var%name), &
      & var%type, ndims, dimids, var%ID)
    call handle_error(stat, "nc_def_var")
  else
    error stop "[def_var] Group ID not associated."
  end if
end subroutine def_var

module subroutine put_var(var)
  type(netcdf_variable), intent(in) :: var
  integer(c_int) :: stat

  if (.not. associated(var%vals)) &
    & error stop "[put_var] Varible values not allocated."

  select type (vals_ => var%vals)
  #: for type, kind, c_name in zip(types, kinds, c_names)
  type is (${type}$(${kind}$))
    stat = nc_put_var_${c_name}$(var%grpID, var%ID, vals_)
    call handle_error(stat, "nc_put_var_${c_name}$")
  #: endfor
  end select
end subroutine put_var

module function inq_var(grp, name) result(var)
  class(netcdf_group), target, intent(inout) :: grp
  character(len=*), intent(in) :: name
  type(netcdf_variable) :: var
  integer(c_int) :: stat

  var%grpID => grp%ID
  var%name = name
  stat = nc_inq_varid(var%grpID, cstr(name), var%ID)
  call handle_error(stat, "nc_inq_varid")

  stat = nc_inq_vartype(var%grpID, var%ID, var%type)
  call handle_error(stat, "nc_inq_vartype")

  call inq_var_dims(var)
  call inq_var_atts(var)
  call get_var_atts(var)
end function inq_var

subroutine get_var(var)
  type(netcdf_variable), intent(inout) :: var
  integer(c_int) :: stat, total_len

  if (.not. associated(var%grpID)) &
    & error stop "[get_var] Group ID not associated."

  if (associated(var%vals)) deallocate (var%vals)
  total_len = product(shape(var))

  select case (var%type)
  #: for type, kind, nc_type in zip(types, kinds, nc_types)
  case (${nc_type}$)
    allocate (${type}$(${kind}$) :: var%vals(total_len))
  #: endfor
  end select

  select type (vals_ => var%vals)
  #: for kind, type, c_name in zip(kinds, types, c_names)
  type is (${type}$(${kind}$))
    stat = nc_get_var_${c_name}$(var%grpID, var%ID, vals_)
    call handle_error(stat, "nc_get_var_${c_name}$")
  #: endfor
  end select
end subroutine get_var

module subroutine to_netcdf_var(var, filename, mode)
  type(netcdf_variable), intent(in) :: var
  character(len=*), intent(in) :: filename
  integer(c_int), intent(in), optional :: mode
  type(netcdf_file), target :: file

  file = data_set([var])
  if (present(mode)) then
    file%mode = mode
  else
    file%mode = ior(nc_netcdf4, nc_clobber)
  end if
  file%filename = filename
  call to_netcdf_grp(file)
end subroutine to_netcdf_var

module subroutine to_netcdf_vars(vars, filename, mode)
  type(netcdf_variable), intent(in) :: vars(:)
  character(len=*), intent(in) :: filename
  integer(c_int), intent(in), optional :: mode
  type(netcdf_file), target :: file

  file = data_set(vars)
  if (present(mode)) then
    file%mode = mode
  else
    file%mode = ior(nc_netcdf4, nc_clobber)
  end if
  file%filename = filename
  call to_netcdf_grp(file)
end subroutine to_netcdf_vars

module function from_netcdf_var(filename, name) result(var)
  character(len=*), intent(in) :: filename, name
  type(netcdf_variable) :: var
  type(netcdf_file) :: file
  integer(c_int) :: stat
  character(kind=c_char, len=nc_max_name) :: tmp

  file%filename = filename
  file%mode = nc_nowrite

  stat = nc_open(cstr(file%filename), file%mode, file%ID)
  call handle_error(stat, "nc_open")
  var = inq_var(file, name)
  call get_var(var)
end function from_netcdf_var

#: for rank in range(1, max_rank)
#: for type, kind in zip(types, kinds)
module subroutine extract_var_${kind}$_${rank}$d(var, raw)
  type(netcdf_variable), target, intent(in) :: var
  ${type}$(${kind}$), pointer, intent(out) :: raw(#{for i in range(1, rank)}#:,#{endfor}#:)

  associate (s => shape(var))
    select type (vals => var%vals)
    type is (${type}$(${kind}$))
      raw(#{for i in range(1, rank)}#1:s(${i}$),#{endfor}#1:s(${rank}$)) => vals
    class default
      error stop "[extract_var_${kind}$_${rank}$d] Invalid pointer type."
    end select
  end associate
end subroutine extract_var_${kind}$_${rank}$d
#: endfor
#: endfor

end submodule submodule_variable
